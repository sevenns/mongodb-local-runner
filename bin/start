#!/usr/bin/env node
const fs = require('fs')
const ora = require('ora')
const chalk = require('chalk')
const clear = require('clear')
const { resolve } = require('path')
const exec = require('executive')
const paths = require('../config/paths')
let config = require('../config/mongolor')

const configPath = resolve('mongolor.config.js')

if (fs.existsSync(configPath)) {
  config = require(configPath)
}

const spinner = ora()
const date = new Date().toDateString().replace(/ /g, '-')
const db = {
  host: config.host || 'localhost',
  port: config.port || 27017,
  data: resolve(paths.root, config.data),
  logs: resolve(paths.root, config.logs, `mongodb-${date}.log`)
}

let command = `mongod --dbpath ${db.data} --logpath ${db.logs} --port ${db.port} --bind_ip ${db.host}`

const serviceName = 'Mongolor - MongoDB Server'
const messages = {
  platform: 'Your platform:',
  port: 'Port:',
  host: 'Host:',
  starting: 'Starting mongodb...\n',
  started: `Starting mongodb complete. Logging to mongodb-${date}.log.\n`
}

clear()

console.log(`${messages.platform} ${chalk.cyan.bold(process.platform)}`)
console.log(`${messages.port} ${chalk.cyan.bold(db.port)}`)
console.log(`${messages.host} ${chalk.cyan.bold(db.host)}\n`)
spinner.start(chalk.cyan.bold(messages.starting))

if (process.platform === 'win32') {
  command += ` --install --serviceName ${serviceName}`

  exec.quiet(command, (error) => {
    if (error) {
      console.log(error)
      process.exit(1)
    }

    exec.quiet(`net start ${serviceName}`, () => {
      spinner.succeed(chalk.green.bold(messages.started))
    })
  })
} else {
  command += ' --fork'

  exec.quiet(command, (error) => {
    if (error) {
      console.log(error)
      process.exit(1)
    }

    spinner.succeed(chalk.green.bold(messages.started))
  })
}
